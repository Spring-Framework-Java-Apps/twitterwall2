<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int="http://www.springframework.org/schema/integration"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/integration
    http://www.springframework.org/schema/integration/spring-integration.xsd">

    <bean id="store" class="org.springframework.integration.store.SimpleMessageStore">
        <property name="messageGroupFactory">
            <bean class="org.springframework.integration.store.SimpleMessageGroupFactory">
                <constructor-arg value="BLOCKING_QUEUE"/>
            </bean>
        </property>
    </bean>

    <bean id="releaserSequenceSizeReleaseStrategy"
          class="org.springframework.integration.aggregator.SequenceSizeReleaseStrategy"/>

    <bean id="releaserSimpleSequenceSizeReleaseStrategy"
          class="org.springframework.integration.aggregator.SimpleSequenceSizeReleaseStrategy"/>

    <!-- CHANNEL -->

    <int:logging-channel-adapter id="logger" level="DEBUG"/>

    <int:channel id="startTaskChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="startUpdateTweetsChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="startUpdateUserProfilesChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="startUpdateUserProfilesFromMentionsChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="startFetchTweetsFromTwitterSearchChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="startFetchUsersFromDefinedUserListChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="startFetchTestDataForUserChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="startFetchTestDataForTweetsChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="startFetchImprintUserChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>


    <int:router id="schedulerRouter" input-channel="startTaskChannel" expression="payload.taskType">
        <int:mapping value="UPDATE_TWEETS" channel="startUpdateTweetsChannel"/>
        <int:mapping value="UPDATE_USER_PROFILES" channel="startUpdateUserProfilesChannel"/>
        <int:mapping value="UPDATE_USER_PROFILES_FROM_MENTIONS" channel="startUpdateUserProfilesFromMentionsChannel"/>
        <int:mapping value="FETCH_TWEETS_FROM_TWITTER_SEARCH" channel="startFetchTweetsFromTwitterSearchChannel"/>
        <int:mapping value="FETCH_USERS_FROM_DEFINED_USER_LIST" channel="startFetchUsersFromDefinedUserListChannel"/>
        <int:mapping value="CONTROLLER_GET_TESTDATA_USER" channel="startFetchTestDataForUserChannel"/>
        <int:mapping value="CONTROLLER_GET_TESTDATA_TWEETS" channel="startFetchTestDataForTweetsChannel"/>
        <int:mapping value="CONTROLLER_CREATE_IMPRINT_USER" channel="startFetchImprintUserChannel"/>
    </int:router>

    <int:chain id="startUpdateTweetsChain" input-channel="startUpdateTweetsChannel">
        <int:splitter
                id="startUpdateTweetsSplitter"
                ref="mqUpdateTweets"
                method="splitMessage"  />
        <int:service-activator
                id="startUpdateTweetsTransformator"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="startUpdateTweetsPersistor"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="startUpdateTweetsAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="startUpdateTweetsFinisher"
                ref="mqTweetFinisher"
                method="finish" />
    </int:chain>


    <int:chain id="startUpdateUserProfilesChain" input-channel="startUpdateUserProfilesChannel">
        <int:splitter
                id="startUpdateUserProfilesSplitter"
                ref="mqUpdateUserProfiles"
                method="splitMessage"  />
        <int:service-activator
                id="startUpdateUserProfilesTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="startUpdateUserProfilesPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="startUpdateUserProfilesAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="startUpdateUserProfilesUserFinisher"
                ref="mqUserFinisher"
                method="finish" />
    </int:chain>


    <int:chain id="startUpdateUserProfilesFromMentionsChain" input-channel="startUpdateUserProfilesFromMentionsChannel">
        <int:splitter
                id="startUpdateUserProfilesFromMentionsSplitter"
                ref="mqUpdateUserProfilesFromMentions"
                method="splitMessage"  />
        <int:service-activator
                id="startUpdateUserProfilesFromMentionsTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="startUpdateUserProfilesFromMentionsPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="startUpdateUserProfilesFromMentionsAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="startUpdateUserProfilesFromMentionsFinisher"
                ref="mqUserFinisher"
                method="finish" />
    </int:chain>


    <int:chain id="startFetchTweetsFromTwitterSearchChain" input-channel="startFetchTweetsFromTwitterSearchChannel">
        <int:splitter
                id="startFetchTweetsFromTwitterSearchSplitter"
                ref="mqFetchTweetsFromTwitterSearch"
                method="splitMessage"  />
        <int:service-activator
                id="startFetchTweetsFromTwitterSearchTransformator"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="startFetchTweetsFromTwitterSearchPersistor"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="startFetchTweetsFromTwitterSearchAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="startFetchTweetsFromTwitterSearchFinisher"
                ref="mqTweetFinisher"
                method="finish" />
    </int:chain>


    <int:chain id="startFetchUsersFromDefinedUserListChain" input-channel="startFetchUsersFromDefinedUserListChannel">
        <int:splitter
                id="startFetchUsersFromDefinedUserListSplitter"
                ref="mqFetchUsersFromDefinedUserList"
                method="splitMessage"  />
        <int:service-activator
                id="startFetchUsersFromDefinedUserListTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="startFetchUsersFromDefinedUserListPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="startFetchUsersFromDefinedUserListAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="startFetchUsersFromDefinedUserListFinisher"
                ref="mqUserFinisher"
                method="finish" />
    </int:chain>

    <int:chain id="startFetchTestDataForUserChain" input-channel="startFetchTestDataForUserChannel">
        <int:splitter
                id="startFetchTestDataForUserSplitter"
                ref="mqCreateTestDataForUsers"
                method="splitMessage"  />
        <int:service-activator
                id="startFetchTestDataForUserTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="startFetchTestDataForUserPersisto"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="startFetchTestDataForUserAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="startFetchTestDataForUserFinishe"
                ref="mqUserFinisher"
                method="finish" />
    </int:chain>


    <int:chain id="startFetchTestDataForTweetsChain" input-channel="startFetchTestDataForTweetsChannel">
        <int:splitter
                id="startFetchTestDataForTweetsSplitter"
                ref="mqCreateTestDataForTweets"
                method="splitMessage"  />
        <int:service-activator
                id="startFetchTestDataForTweetsTransformator"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="startFetchTestDataForTweetsPersistor"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="startFetchTestDataForTweetsAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="startFetchTestDataForTweetsFinisher"
                ref="mqTweetFinisher"
                method="finish" />
    </int:chain>

    <int:chain id="startFetchImprintUserChain" input-channel="startFetchImprintUserChannel">
        <int:service-activator
                id="startFetchImprintUserCreator"
                ref="mqCreateImprintUser"
                method="createImprintUser" />
        <int:service-activator
                id="startFetchImprintUserTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="startFetchImprintUserPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
    </int:chain>

    <int:channel id="startTaskFireAndForgetChannel">
        <int:dispatcher task-executor="myThreadPoolTaskExecutor"/>
    </int:channel>

    <bean id="myThreadPoolTaskExecutor"
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
    </bean>

    <int:router id="controllerRouter" input-channel="startTaskFireAndForgetChannel" expression="payload.taskType">
        <int:mapping value="UPDATE_TWEETS" channel="startUpdateTweetsFireAndForgetChannel"/>
        <int:mapping value="UPDATE_USER_PROFILES" channel="startUpdateUserProfilesFireAndForgetChannel"/>
        <int:mapping value="UPDATE_USER_PROFILES_FROM_MENTIONS" channel="startUpdateUserProfilesFromMentionsFireAndForgetChannel"/>
        <int:mapping value="FETCH_TWEETS_FROM_TWITTER_SEARCH" channel="startFetchTweetsFromTwitterSearchFireAndForgetChannel"/>
        <int:mapping value="FETCH_USERS_FROM_DEFINED_USER_LIST" channel="startFetchUsersFromDefinedUserListFireAndForgetChannel"/>
    </int:router>

    <int:channel id="startUpdateTweetsFireAndForgetChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="startUpdateUserProfilesFireAndForgetChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="startFetchTweetsFromTwitterSearchFireAndForgetChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="startUpdateUserProfilesFromMentionsFireAndForgetChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="startUpdateUserProfilesFromMentionsChannelForWebController" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="startFetchUsersFromDefinedUserListFireAndForgetChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>



    <int:chain id="startUpdateTweetsFireAndForgetChain" input-channel="startUpdateTweetsFireAndForgetChannel">
        <int:splitter
                id="startUpdateTweetsFireAndForgetSplitter"
                ref="mqUpdateTweets"
                method="splitMessage"  />
        <int:service-activator
                id="startUpdateTweetsFireAndForgetTransformator"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="startUpdateTweetsFireAndForgetPersistor"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="startUpdateTweetsFireAndForgetAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="startUpdateTweetsFireAndForgetFinisher"
                ref="mqTweetFinisher"
                method="finishAsnyc" />
    </int:chain>


    <int:chain id="startUpdateUserProfilesFireAndForgetChain" input-channel="startUpdateUserProfilesFireAndForgetChannel">
        <int:splitter
                id="startUpdateUserProfilesFireAndForgetSplitter"
                ref="mqUpdateUserProfiles"
                method="splitMessage"  />
        <int:service-activator
                id="startUpdateUserProfilesFireAndForgetTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="startUpdateUserProfilesFireAndForgetPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="startUpdateUserProfilesFireAndForgetAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="startUpdateUserProfilesFireAndForgetFinisher"
                ref="mqUserFinisher"
                method="finishAsnyc" />
    </int:chain>


    <int:chain id="startUpdateUserProfilesFromMentionsFireAndForgetChain" input-channel="startUpdateUserProfilesFromMentionsFireAndForgetChannel">
        <int:splitter
                id="startUpdateUserProfilesFromMentionsFireAndForgetSplitter"
                ref="mqUpdateUserProfilesFromMentions"
                method="splitMessage"  />
        <int:service-activator
                id="startUpdateUserProfilesFromMentionsFireAndForgetTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="startUpdateUserProfilesFromMentionsFireAndForgetPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="startUpdateUserProfilesFromMentionsFireAndForgetAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="startUpdateUserProfilesFromMentionsFireAndForgetFinisher"
                ref="mqUserFinisher"
                method="finishAsnyc" />
    </int:chain>


    <int:chain id="startFetchTweetsFromTwitterSearchFireAndForgetChain" input-channel="startFetchTweetsFromTwitterSearchFireAndForgetChannel">
        <int:splitter
                id="startFetchTweetsFromTwitterSearchFireAndForgetSplitter"
                ref="mqFetchTweetsFromTwitterSearch"
                method="splitMessage" />
        <int:service-activator
                id="startFetchTweetsFromTwitterSearchFireAndForgetTransformator"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="startFetchTweetsFromTwitterSearchFireAndForgetPersistor"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="startFetchTweetsFromTwitterSearchFireAndForgetAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="startFetchTweetsFromTwitterSearchFireAndForgetFinisher"
                ref="mqTweetFinisher"
                method="finishAsnyc"  />
    </int:chain>


    <int:chain id="startFetchUsersFromDefinedUserListFireAndForgetChain" input-channel="startFetchUsersFromDefinedUserListFireAndForgetChannel">
        <int:splitter
                id="startFetchUsersFromDefinedUserListFireAndForgetSplitter"
                ref="mqFetchUsersFromDefinedUserList"
                method="splitMessage" />
        <int:service-activator
                id="startFetchUsersFromDefinedUserListFireAndForgetTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="startFetchUsersFromDefinedUserListFireAndForgetPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="startFetchUsersFromDefinedUserListFireAndForgetAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="startFetchUsersFromDefinedUserListFireAndForgetFinisher"
                ref="mqUserFinisher"
                method="finishAsnyc" />
    </int:chain>

</beans>
