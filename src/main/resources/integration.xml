<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int="http://www.springframework.org/schema/integration"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/integration
    http://www.springframework.org/schema/integration/spring-integration.xsd">

    <bean id="myMessageStore" class="org.springframework.integration.store.SimpleMessageStore">
        <property name="messageGroupFactory">
            <bean class="org.springframework.integration.store.SimpleMessageGroupFactory">
                <constructor-arg value="BLOCKING_QUEUE"/>
            </bean>
        </property>
    </bean>

    <bean id="myThreadPoolTaskExecutor"
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
    </bean>

    <bean id="releaserSequenceSizeReleaseStrategy"
          class="org.springframework.integration.aggregator.SequenceSizeReleaseStrategy"/>

    <bean id="releaserSimpleSequenceSizeReleaseStrategy"
          class="org.springframework.integration.aggregator.SimpleSequenceSizeReleaseStrategy"/>

    <!-- CHANNEL -->

    <int:logging-channel-adapter id="logger" level="DEBUG"/>


    <int:channel id="channel.TaskStart" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="channel.async.TaskStart" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:dispatcher task-executor="myThreadPoolTaskExecutor"/>
    </int:channel>


    <int:channel id="channel.UpdateTweets" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger" />
        </int:interceptors>
    </int:channel>

    <int:channel id="channel.async.UpdateTweets" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger" />
        </int:interceptors>
    </int:channel>


    <int:channel id="channel.UpdateUser" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="channel.async.UpdateUser" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>


    <int:channel id="channel.UpdateMentionsForUsers" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="channel.async.UpdateMentionsForUsers" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>


    <int:channel id="channel.FetchTweetsFromSearch" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="channel.async.FetchTweetsFromSearch" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>


    <int:channel id="channel.FetchUsersFromList" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="channel.async.FetchUsersFromList" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>


    <int:channel id="channel.FetchFollower" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="channel.async.FetchFollower" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>


    <int:channel id="channel.FetchFriends" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="channel.async.FetchFriends" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>


    <int:channel id="channel.CreateTestDataUser" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="channel.async.CreateTestDataUser" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>


    <int:channel id="channel.CreateTestDataTweets" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="channel.async.CreateTestDataTweets" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>


    <int:channel id="channel.CreateImprintUser" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="channel.async.CreateImprintUser" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>


    <int:channel id="channel.RemoveOldDataFromStorage" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="channel.async.RemoveOldDataFromStorage" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>


    <int:channel id="channel.FetchHomeTimeline" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="channel.async.FetchHomeTimeline" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>


    <int:channel id="channel.FetchUserTimeline" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="channel.async.FetchUserTimeline" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>


    <int:channel id="channel.FetchMentions" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="channel.async.FetchMentions" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>


    <int:channel id="channel.FetchFavorites" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="channel.async.FetchFavorites" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>



    <int:channel id="channel.FetchRetweetsOfMe" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="channel.async.FetchRetweetsOfMe" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>


    <int:channel id="channel.FetchLists" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="channel.async.FetchLists" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>


    <int:channel id="channel.FetchListOwner" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="channel.async.FetchListOwner" datatype="org.woehlke.twitterwall.backend.mq.tasks.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>


    <int:router id="router.TaskStart" input-channel="channel.TaskStart" expression="payload.taskType">
        <int:mapping value="UPDATE_TWEETS" channel="channel.UpdateTweets"/>
        <int:mapping value="UPDATE_USERS" channel="channel.UpdateUser"/>
        <int:mapping value="UPDATE_MENTIONS_FOR_USERS" channel="channel.UpdateMentionsForUsers"/>
        <int:mapping value="FETCH_TWEETS_FROM_SEARCH" channel="channel.FetchTweetsFromSearch"/>
        <int:mapping value="FETCH_USERS_FROM_LIST" channel="channel.FetchUsersFromList"/>
        <int:mapping value="FETCH_FOLLOWER" channel="channel.FetchFollower"/>
        <int:mapping value="FETCH_FRIENDS" channel="channel.FetchFriends"/>
        <int:mapping value="CREATE_TESTDATA_USERS" channel="channel.CreateTestDataUser"/>
        <int:mapping value="CREATE_TESTDATA_TWEETS" channel="channel.CreateTestDataTweets"/>
        <int:mapping value="CREATE_IMPRINT_USER" channel="channel.CreateImprintUser"/>
        <int:mapping value="REMOVE_OLD_DATA_FROM_STORAGE" channel="channel.RemoveOldDataFromStorage"/>
        <int:mapping value="FETCH_HOME_TIMELINE" channel="channel.FetchHomeTimeline"/>
        <int:mapping value="FETCH_USER_TIMELINE" channel="channel.FetchUserTimeline"/>
        <int:mapping value="FETCH_MENTIONS" channel="channel.FetchMentions"/>
        <int:mapping value="FETCH_FAVORITES" channel="channel.FetchFavorites"/>
        <int:mapping value="FETCH_RETWEETS_OF_ME" channel="channel.FetchRetweetsOfMe"/>
        <int:mapping value="FETCH_LISTS" channel="channel.FetchLists"/>
        <int:mapping value="FETCH_USERLIST_OWNERS" channel="channel.FetchListOwner"/>
    </int:router>

    <int:router id="router.async.TaskStart" input-channel="channel.async.TaskStart" expression="payload.taskType">
        <int:mapping value="UPDATE_TWEETS" channel="channel.async.UpdateTweets"/>
        <int:mapping value="UPDATE_USERS" channel="channel.async.UpdateUser"/>
        <int:mapping value="UPDATE_MENTIONS_FOR_USERS" channel="channel.async.UpdateMentionsForUsers"/>
        <int:mapping value="FETCH_TWEETS_FROM_SEARCH" channel="channel.async.FetchTweetsFromSearch"/>
        <int:mapping value="FETCH_USERS_FROM_LIST" channel="channel.async.FetchUsersFromList"/>
        <int:mapping value="FETCH_FOLLOWER" channel="channel.async.FetchFollower"/>
        <int:mapping value="FETCH_FRIENDS" channel="channel.async.FetchFriends"/>
        <int:mapping value="CREATE_TESTDATA_USERS" channel="channel.async.CreateTestDataUser"/>
        <int:mapping value="CREATE_TESTDATA_TWEETS" channel="channel.async.CreateTestDataTweets"/>
        <int:mapping value="CREATE_IMPRINT_USER" channel="channel.async.CreateImprintUser"/>
        <int:mapping value="REMOVE_OLD_DATA_FROM_STORAGE" channel="channel.async.RemoveOldDataFromStorage"/>
        <int:mapping value="FETCH_HOME_TIMELINE" channel="channel.async.FetchHomeTimeline"/>
        <int:mapping value="FETCH_USER_TIMELINE" channel="channel.async.FetchUserTimeline"/>
        <int:mapping value="FETCH_MENTIONS" channel="channel.async.FetchMentions"/>
        <int:mapping value="FETCH_FAVORITES" channel="channel.async.FetchFavorites"/>
        <int:mapping value="FETCH_RETWEETS_OF_ME" channel="channel.async.FetchRetweetsOfMe"/>
        <int:mapping value="FETCH_LISTS" channel="channel.async.FetchLists"/>
        <int:mapping value="FETCH_USERLIST_OWNERS" channel="channel.async.FetchListOwner"/>
    </int:router>

    <!--
    <int:router id="router.async.TaskStart" input-channel="channel.async.TaskStart" expression="payload.taskType">
        <int:mapping value="UPDATE_TWEETS" channel="updateTweetsFireAndForgetChannel"/>
        <int:mapping value="UPDATE_USERS" channel="updateUsersFireAndForgetChannel"/>
        <int:mapping value="UPDATE_MENTIONS_FOR_USERS" channel="updateUsersFromMentionsFireAndForgetChannel"/>
        <int:mapping value="FETCH_TWEETS_FROM_SEARCH" channel="fetchTweetsFromSearchFireAndForgetChannel"/>
        <int:mapping value="FETCH_USERS_FROM_LIST" channel="fetchUsersFromListFireAndForgetChannel"/>
        <int:mapping value="FETCH_FOLLOWER" channel="fetchFollowerFireAndForgetChannel"/>
        <int:mapping value="FETCH_FRIENDS" channel="fetchFriendsFireAndForgetChannel"/>
        <int:mapping value="CREATE_TESTDATA_USERS" channel="createTestDataUsersFireAndForgetChannel"/>
        <int:mapping value="CREATE_TESTDATA_TWEETS" channel="createTestDataTweetsFireAndForgetChannel"/>
        <int:mapping value="CREATE_IMPRINT_USER" channel="createImprintUserFireAndForgetChannel"/>
        <int:mapping value="REMOVE_OLD_DATA_FROM_STORAGE" channel="removeOldDataFromStorageFireAndForgetChannel"/>
        <int:mapping value="FETCH_HOME_TIMELINE" channel="getHomeTimelineFireAndForgetChannel"/>
        <int:mapping value="FETCH_USER_TIMELINE" channel="getUserTimelineFireAndForgetChannel"/>
        <int:mapping value="FETCH_MENTIONS" channel="getMentionsFireAndForgetChannel"/>
        <int:mapping value="FETCH_FAVORITES" channel="getFavoritesFireAndForgetChannel"/>
        <int:mapping value="FETCH_RETWEETS_OF_ME" channel="getRetweetsOfMeFireAndForgetChannel"/>
        <int:mapping value="FETCH_LISTS" channel="getListsFireAndForgetChannel"/>
        <int:mapping value="FETCH_USERLIST_OWNERS" channel="fetchUserlistOwnersFireAndForgetChannel"/>
    </int:router>
    -->

    <int:chain id="chain.async.FetchListOwner" input-channel="channel.async.FetchListOwner">
        <int:splitter
                id="splitter.async.FetchListOwner"
                ref="mqFetchUserlistOwnersSplitter"
                method="splitUserMessage" />
        <int:service-activator
                id="transform.async.FetchListOwner"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="persist.async.FetchListOwners"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="aggregator.async.FetchListOwners"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.async.FetchListOwners"
                ref="mqUserFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="chain.FetchListOwner" input-channel="channel.FetchListOwner">
        <int:splitter
                id="splitter.FetchListOwner"
                ref="mqFetchUserlistOwnersSplitter"
                method="splitUserMessage" />
        <int:service-activator
                id="transform.FetchListOwner"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="persist.FetchListOwners"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="aggregator.FetchListOwners"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.FetchListOwners"
                ref="mqUserFinisher"
                method="finish" />
    </int:chain>


    <int:chain id="chain.async.FetchHomeTimeline" input-channel="channel.async.FetchHomeTimeline">
        <int:splitter
                id="spliter.async.FetchHomeTimeline"
                ref="mqHomeTimelineSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="transform.async.FetchHomeTimeline"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="persist.async.FetchHomeTimeline"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="aggregator.async.FetchHomeTimeline"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.async.FetchHomeTimeline"
                ref="mqTweetFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="chain.FetchtHomeTimeline" input-channel="channel.FetchHomeTimeline">
        <int:splitter
                id="splitter.FetchHomeTimeline"
                ref="mqHomeTimelineSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="transform.FetchHomeTimeline"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="persist.FetchHomeTimeline"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="aggregator.FetchHomeTimeline"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.FetchHomeTimeline"
                ref="mqTweetFinisher"
                method="finish" />
    </int:chain>




    <int:chain id="chain.async.FetchUserTimeline" input-channel="channel.async.FetchUserTimeline">
        <int:splitter
                id="splitter.async.FetchUserTimeline"
                ref="mqUserTimelineSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="transform.async.FetchUserTimeline"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="persist.async.FetchUserTimeline"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="aggregator.async.FetchUserTimeline"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.async.FetchUserTimeline"
                ref="mqTweetFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="chain.FetchUserTimeline" input-channel="channel.FetchUserTimeline">
        <int:splitter
                id="splitter.FetchUserTimeline"
                ref="mqUserTimelineSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="transform.FetchUserTimeline"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="persist.FetchUserTimeline"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="aggregator.FetchUserTimeline"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.FetchUserTimeline"
                ref="mqTweetFinisher"
                method="finish" />
    </int:chain>



    <int:chain id="chain.async.FetchMentions" input-channel="channel.async.FetchMentions">
        <int:splitter
                id="splitter.async.FetchMentions"
                ref="mqMentionsSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="transform.async.FetchMentions"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="persist.async.FetchMentions"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="aggregator.async.FetchMentions"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.async.FetchMentions"
                ref="mqTweetFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="chain.FetchMentions" input-channel="channel.FetchMentions">
        <int:splitter
                id="splitter.FetchMentions"
                ref="mqMentionsSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="transform.FetchMentions"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="persist.FetchMentions"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="aggregator.FetchMentions"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.FetchMentions"
                ref="mqTweetFinisher"
                method="finish" />
    </int:chain>



    <int:chain id="chain.async.FetchFavorites" input-channel="channel.async.FetchFavorites">
        <int:splitter
                id="splitter.async.FetchFavorites"
                ref="mqFavoritesSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="transform.async.FetchFavorites"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="persist.async.FetchFavorites"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="aggregator.async.FetchFavorites"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.async.FetchFavorites"
                ref="mqTweetFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="chain.FetchFavorites" input-channel="channel.FetchFavorites">
        <int:splitter
                id="splitter.FetchFavorites"
                ref="mqFavoritesSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="transform.FetchFavorites"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="persist.FetchFavorites"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="aggregator.FetchFavorites"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.FetchFavorites"
                ref="mqTweetFinisher"
                method="finish" />
    </int:chain>




    <int:chain id="chain.async.FetchRetweetsOfMe" input-channel="channel.async.FetchRetweetsOfMe">
        <int:splitter
                id="splitter.async.FetchRetweetsOfMe"
                ref="mqRetweetsOfMeSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="transform.async.FetchRetweetsOfMe"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="persist.async.FetchRetweetsOfMe"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="aggregator.async.FetchRetweetsOfMe"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.async.FetchRetweetsOfMe"
                ref="mqTweetFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="chain.FetchRetweetsOfMe" input-channel="channel.FetchRetweetsOfMe">
        <int:splitter
                id="splitter.FetchRetweetsOfMe"
                ref="mqRetweetsOfMeSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="transform.FetchRetweetsOfMe"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="persist.FetchRetweetsOfMe"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="aggregator.FetchRetweetsOfMe"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.FetchRetweetsOfMe"
                ref="mqTweetFinisher"
                method="finish" />
    </int:chain>


    <int:chain id="chain.async.FetchLists" input-channel="channel.async.FetchLists">
        <int:splitter
                id="splitter.async.FetchLists"
                ref="mqUserListsSplitter"
                method="splitUserListMessage"  />
        <int:service-activator
                id="transform.async.FetchLists"
                ref="mqUserListTransformator"
                method="transformList" />
        <int:service-activator
                id="persist.async.FetchLists"
                ref="mqUserListPersistor"
                method="persistList" />
        <int:aggregator
                id="aggregator.async.FetchLists"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.async.FetchLists"
                ref="mqUserListsFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="chain.FetchLists" input-channel="channel.FetchLists">
        <int:splitter
                id="splitter.FetchLists"
                ref="mqUserListsSplitter"
                method="splitUserListMessage"  />
        <int:service-activator
                id="transform.FetchLists"
                ref="mqUserListTransformator"
                method="transformList" />
        <int:service-activator
                id="persist.FetchLists"
                ref="mqUserListPersistor"
                method="persistList" />
        <int:aggregator
                id="aggregator.FetchLists"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.FetchLists"
                ref="mqUserListsFinisher"
                method="finish" />
    </int:chain>



    <int:chain id="chain.async.UpdateTweets" input-channel="channel.async.UpdateTweets">
        <int:splitter
                id="splitter.async.UpdateTweets"
                ref="mqUpdateTweetsSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="transform.async.UpdateTweets"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="persist.async.UpdateTweets"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="aggregator.async.UpdateTweets"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.async.UpdateTweets"
                ref="mqTweetFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="chain.UpdateTweets" input-channel="channel.UpdateTweets">
        <int:splitter
                id="splitter.UpdateTweets"
                ref="mqUpdateTweetsSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="transform.UpdateTweets"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="persist.UpdateTweets"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="aggregator.UpdateTweets"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.UpdateTweets"
                ref="mqTweetFinisher"
                method="finish" />
    </int:chain>


    <int:chain id="chain.async.UpdateUser" input-channel="channel.async.UpdateUser">
        <int:splitter
                id="splitter.async.UpdateUser"
                ref="mqUpdateUserSplitter"
                method="splitUserMessage" />
        <int:service-activator
                id="transform.async.UpdateUser"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="persist.async.UpdateUser"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="aggregator.async.UpdateUser"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.async.UpdateUser"
                ref="mqUserFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="chain.UpdateUser" input-channel="channel.UpdateUser">
        <int:splitter
                id="splitter.UpdateUser"
                ref="mqUpdateUserSplitter"
                method="splitUserMessage" />
        <int:service-activator
                id="transform.UpdateUser"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="persist.UpdateUser"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="aggregator.UpdateUser"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.UpdateUser"
                ref="mqUserFinisher"
                method="finish" />
    </int:chain>



    <int:chain id="chain.async.UpdateMentionsForUsers" input-channel="channel.async.UpdateMentionsForUsers">
        <int:splitter
                id="splitter.async.UpdateMentionsForUsers"
                ref="mqUpdateUserFromMentionsSplitter"
                method="splitUserMessage"  />
        <int:service-activator
                id="load.async.UpdateMentionsForUsers"
                ref="mqUserforMentionLoader"
                method="fetchUserforMentionfromTwitter" />
        <int:service-activator
                id="transform.async.UpdateMentionsForUsers"
                ref="mqUserforMentionTransformator"
                method="transformUserforMention" />
        <int:service-activator
                id="persist.async.UpdateMentionsForUsers"
                ref="mqUserforMentionPersistor"
                method="persistUserforMention" />
        <int:service-activator
                id="update.async.UpdateMentionsForUsers"
                ref="mqUpdateMentionWithUser"
                method="updateMentionWithUser" />
        <int:aggregator
                id="aggregator.async.UpdateMentionsForUsers"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.async.UpdateMentionsForUsers"
                ref="mqMentionFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="chain.UpdateMentionsForUsers" input-channel="channel.UpdateMentionsForUsers">
        <int:splitter
                id="splitter.UpdateMentionsForUsers"
                ref="mqUpdateUserFromMentionsSplitter"
                method="splitUserMessage"  />
        <int:service-activator
                id="load.UpdateMentionsForUsers"
                ref="mqUserforMentionLoader"
                method="fetchUserforMentionfromTwitter" />
        <int:service-activator
                id="transform.UpdateMentionsForUsers"
                ref="mqUserforMentionTransformator"
                method="transformUserforMention" />
        <int:service-activator
                id="persist.UpdateMentionsForUsers"
                ref="mqUserforMentionPersistor"
                method="persistUserforMention" />
        <int:service-activator
                id="update.UpdateMentionsForUsers"
                ref="mqUpdateMentionWithUser"
                method="updateMentionWithUser" />
        <int:aggregator
                id="aggregator.UpdateMentionsForUsers"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.UpdateMentionsForUsers"
                ref="mqMentionFinisher"
                method="finish" />
    </int:chain>


    <int:chain id="chain.async.FetchTweetsFromSearch" input-channel="channel.async.FetchTweetsFromSearch">
        <int:splitter
                id="splitter.async.FetchTweetsFromSearch"
                ref="mqFetchTweetsFromTwitterSearchSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="transform.async.FetchTweetsFromSearch"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="persist.async.FetchTweetsFromSearch"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="aggregator.async.FetchTweetsFromSearch"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.async.FetchTweetsFromSearch"
                ref="mqTweetFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="chain.FetchTweetsFromSearch" input-channel="channel.FetchTweetsFromSearch">
        <int:splitter
                id="splitter.FetchTweetsFromSearch"
                ref="mqFetchTweetsFromTwitterSearchSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="transform.FetchTweetsFromSearch"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="persist.FetchTweetsFromSearch"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="aggregator.FetchTweetsFromSearch"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.FetchTweetsFromSearch"
                ref="mqTweetFinisher"
                method="finish" />
    </int:chain>



    <int:chain id="chain.async.FetchUsersFromList" input-channel="channel.async.FetchUsersFromList">
        <int:splitter
                id="splitter.async.FetchUsersFromList"
                ref="mqFetchUserFromListSplitter"
                method="splitUserMessage"  />
        <int:service-activator
                id="transform.async.FetchUsersFromList"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="persist.async.FetchUsersFromList"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="aggregator.async.FetchUsersFromList"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.async.FetchUsersFromList"
                ref="mqUserFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="chain.FetchUsersFromList" input-channel="channel.FetchUsersFromList">
        <int:splitter
                id="splitter.FetchUsersFromList"
                ref="mqFetchUserFromListSplitter"
                method="splitUserMessage"  />
        <int:service-activator
                id="transform.FetchUsersFromList"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="persist.FetchUsersFromList"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="aggregator.FetchUsersFromList"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.FetchUsersFromList"
                ref="mqUserFinisher"
                method="finish" />
    </int:chain>



    <int:chain id="chain.async.FetchUsersFromList" input-channel="channel.async.FetchUsersFromList">
        <int:splitter
                id="splitter.async.FetchUsersFromList"
                ref="mqFetchUserFromListSplitter"
                method="splitUserMessage"  />
        <int:service-activator
                id="transform.async.FetchUsersFromList"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="persist.async.FetchUsersFromList"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="aggregator.async.FetchUsersFromList"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.async.FetchUsersFromList"
                ref="mqUserFinisher"
                method="finishAsnyc" />
    </int:chain>

<!--
    <int:chain id="fetchUsersFromListChain" input-channel="fetchUsersFromListChannel">
        <int:splitter
                id="fetchUsersFromListSplitter"
                ref="mqFetchUserFromListSplitter"
                method="splitUserMessage"  />
        <int:service-activator
                id="fetchUsersFromListTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="fetchUsersFromListPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="fetchUsersFromListAggregator"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="fetchUsersFromListFinisher"
                ref="mqUserFinisher"
                method="finish" />
    </int:chain>
-->


    <int:chain id="chain.async.FetchFollower" input-channel="channel.async.FetchFollower">
        <int:splitter
                id="splitter.async.FetchFollower"
                ref="mqFetchFollowerSplitter"
                method="splitUserMessage"  />
        <int:service-activator
                id="check.async.FetchFollower"
                ref="mqUserCheckStorage"
                method="checkIfUserIsInStorage" />
        <int:service-activator
                id="transform.async.FetchFollower"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="persist.async.FetchFollower"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="aggregator.async.FetchFollower"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.async.FetchFollower"
                ref="mqUserFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="chain.FetchFollower" input-channel="channel.FetchFollower">
        <int:splitter
                id="splitter.FetchFollower"
                ref="mqFetchFollowerSplitter"
                method="splitUserMessage"  />
        <int:service-activator
                id="check.FetchFollower"
                ref="mqUserCheckStorage"
                method="checkIfUserIsInStorage" />
        <int:service-activator
                id="transform.FetchFollower"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="persist.FetchFollower"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="aggregator.FetchFollower"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.FetchFollower"
                ref="mqUserFinisher"
                method="finish" />
    </int:chain>



    <int:chain id="chain.async.FetchFriends" input-channel="channel.async.FetchFriends">
        <int:splitter
                id="splitter.async.FetchFriends"
                ref="mqFetchFriendsSplitter"
                method="splitUserMessage"  />
        <int:service-activator
                id="check.async.FetchFriends"
                ref="mqUserCheckStorage"
                method="checkIfUserIsInStorage" />
        <int:service-activator
                id="transform.async.FetchFriends"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="persist.async.FetchFriends"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="aggregator.async.FetchFriends"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.async.FetchFriends"
                ref="mqUserFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="chain.FetchFriends" input-channel="channel.FetchFriends">
        <int:splitter
                id="splitter.FetchFriends"
                ref="mqFetchFriendsSplitter"
                method="splitUserMessage"  />
        <int:service-activator
                id="check.FetchFriends"
                ref="mqUserCheckStorage"
                method="checkIfUserIsInStorage" />
        <int:service-activator
                id="transform.FetchFriends"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="persist.FetchFriends"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="aggregator.FetchFriends"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.FetchFriends"
                ref="mqUserFinisher"
                method="finish" />
    </int:chain>



    <int:chain id="chain.async.CreateTestDataTweets" input-channel="channel.async.CreateTestDataTweets">
        <int:splitter
                id="splitter.async.CreateTestDataTweets"
                ref="mqCreateTestDataForTweetsSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="transform.async.CreateTestDataTweets"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="persist.async.CreateTestDataTweets"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="aggregator.async.CreateTestDataTweets"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.async.CreateTestDataTweets"
                ref="mqTweetFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="chain.CreateTestDataTweets" input-channel="channel.CreateTestDataTweets">
        <int:splitter
                id="splitter.CreateTestDataTweets"
                ref="mqCreateTestDataForTweetsSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="transform.CreateTestDataTweets"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="persist.CreateTestDataTweets"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="aggregator.CreateTestDataTweets"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.CreateTestDataTweets"
                ref="mqTweetFinisher"
                method="finish" />
    </int:chain>



    <int:chain id="chain.async.CreateImprintUser" input-channel="channel.async.CreateImprintUser">
        <int:service-activator
                id="load.async.CreateImprintUser"
                ref="mqCreateImprintUser"
                method="createImprintUser" />
        <int:service-activator
                id="transform.async.CreateImprintUser"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="persist.async.CreateImprintUser"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:service-activator
                id="finish.async.CreateImprintUser"
                ref="mqUserFinisher"
                method="finishOneUserAsnyc" />
    </int:chain>

    <int:chain id="chain.CreateImprintUser" input-channel="channel.CreateImprintUser">
        <int:service-activator
                id="load.CreateImprintUser"
                ref="mqCreateImprintUser"
                method="createImprintUser" />
        <int:service-activator
                id="transform.CreateImprintUser"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="persist.CreateImprintUser"
                ref="mqUserPersistor"
                method="persistUser" />
    </int:chain>



    <int:chain id="chain.async.RemoveOldDataFromStorage" input-channel="channel.async.RemoveOldDataFromStorage">
        <int:splitter
                id="splitter.async.RemoveOldDataFromStorage"
                ref="mqFindTweetsToRemoveSplitter"
                method="splitTweetMessage"  />
        <int:aggregator
                id="aggregator.async.RemoveOldDataFromStorage"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.async.RemoveOldDataFromStorage"
                ref="mqTweetFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="chain.RemoveOldDataFromStorage" input-channel="channel.RemoveOldDataFromStorage">
        <int:splitter
                id="splitter.RemoveOldDataFromStorage"
                ref="mqFindTweetsToRemoveSplitter"
                method="splitTweetMessage"  />
        <int:aggregator
                id="aggregator.RemoveOldDataFromStorage"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="finish.RemoveOldDataFromStorage"
                ref="mqTweetFinisher"
                method="finish" />
    </int:chain>

    <!--  Fire and Forget Chains -->


    <!--
    <int:chain id="fetchUserlistOwnersFireAndForgetChain" input-channel="fetchUserlistOwnersFireAndForgetChannel">
        <int:splitter
                id="fetchUserlistOwnersFireAndForgetSplitter"
                ref="mqFetchUserlistOwnersSplitter"
                method="splitUserMessage" />
        <int:service-activator
                id="fetchUserlistOwnersFireAndForgetTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="fetchUserlistOwnersFireAndForgetPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="fetchUserlistOwnersFireAndForgetAggregator"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="fetchUserlistOwnersFireAndForgetFinisher"
                ref="mqUserFinisher"
                method="finishAsnyc" />
    </int:chain>



    <int:chain id="createImprintUserFireAndForgetChain" input-channel="createImprintUserFireAndForgetChannel">
        <int:service-activator
            id="createImprintUserFireAndForgetCreator"
            ref="mqCreateImprintUser"
            method="createImprintUser" />
        <int:service-activator
            id="createImprintUserFireAndForgetTransformator"
            ref="mqUserTransformator"
            method="transformUser" />
        <int:service-activator
            id="createImprintUserFireAndForgetPersistor"
            ref="mqUserPersistor"
            method="persistUser" />
        <int:service-activator
            id="createImprintUserFireAndForgetFinisher"
            ref="mqUserFinisher"
            method="finishOneUserAsnyc" />
    </int:chain>

    <int:chain id="getHomeTimelineFireAndForgetChain" input-channel="getHomeTimelineFireAndForgetChannel">
        <int:splitter
                id="getHomeTimelineFireAndForgetSplitter"
                ref="mqHomeTimelineSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="getHomeTimelineFireAndForgetTransformator"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="getHomeTimelineFireAndForgetPersistor"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="getHomeTimelineFireAndForgetAggregator"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="getHomeTimelineFireAndForgetFinisher"
                ref="mqTweetFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="getUserTimelineFireAndForgetChain" input-channel="getUserTimelineFireAndForgetChannel">
        <int:splitter
                id="getUserTimelineFireAndForgetplitter"
                ref="mqUserTimelineSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="getUserTimelineFireAndForgetTransformator"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="getUserTimelineFireAndForgetPersistor"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="getUserTimelineFireAndForgetAggregator"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="getUserTimelineFireAndForgetFinisher"
                ref="mqTweetFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="getMentionsFireAndForgetChain" input-channel="getMentionsFireAndForgetChannel">
        <int:splitter
                id="getMentionsFireAndForgetSplitter"
                ref="mqMentionsSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="getMentionsFireAndForgetTransformator"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="getMentionsFireAndForgetPersistor"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="getMentionsFireAndForgetAggregator"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="getMentionsFireAndForgetFinisher"
                ref="mqTweetFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="getFavoritesFireAndForgetChain" input-channel="getFavoritesFireAndForgetChannel">
        <int:splitter
                id="getFavoritesFireAndForgetSplitter"
                ref="mqFavoritesSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="getFavoritesFireAndForgetTransformator"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="getFavoritesFireAndForgetPersistor"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="getFavoritesFireAndForgetAggregator"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="getFavoritesFireAndForgetFinisher"
                ref="mqTweetFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="getRetweetsOfMeFireAndForgetChain" input-channel="getRetweetsOfMeFireAndForgetChannel">
        <int:splitter
                id="getRetweetsOfMeFireAndForgetSplitter"
                ref="mqRetweetsOfMeSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="getRetweetsOfMeFireAndForgetTransformator"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="getRetweetsOfMeFireAndForgetPersistor"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="getRetweetsOfMeFireAndForgetAggregator"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="getRetweetsOfMeFireAndForgetFinisher"
                ref="mqTweetFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="getListsFireAndForgetChain" input-channel="getListsFireAndForgetChannel">
        <int:splitter
                id="getListsFireAndForgetSplitter"
                ref="mqUserListsSplitter"
                method="splitUserListMessage"  />
        <int:service-activator
                id="getListsFireAndForgetTransformator"
                ref="mqUserListTransformator"
                method="transformList" />
        <int:service-activator
                id="getListsFireAndForgetPersistor"
                ref="mqUserListPersistor"
                method="persistList" />
        <int:aggregator
                id="getListsFireAndForgetAggregator"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="getListsFireAndForgetFinisher"
                ref="mqUserListsFinisher"
                method="finishAsnyc" />
    </int:chain>




    <int:chain id="updateTweetsFireAndForgetChain" input-channel="updateTweetsFireAndForgetChannel">
        <int:splitter
                id="updateTweetsFireAndForgetSplitter"
                ref="mqUpdateTweetsSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="updateTweetsFireAndForgetTransformator"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="updateTweetsFireAndForgetPersistor"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="updateTweetsFireAndForgetAggregator"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="updateTweetsFireAndForgetFinisher"
                ref="mqTweetFinisher"
                method="finishAsnyc" />
    </int:chain>


    <int:chain id="updateUserFireAndForgetChain" input-channel="updateUsersFireAndForgetChannel">
        <int:splitter
                id="updateUserFireAndForgetSplitter"
                ref="mqUpdateUserSplitter"
                method="splitUserMessage"  />
        <int:service-activator
                id="updateUserFireAndForgetTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="updateUserFireAndForgetPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="updateUserFireAndForgetAggregator"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="updateUserFireAndForgetFinisher"
                ref="mqUserFinisher"
                method="finishAsnyc" />
    </int:chain>


    <int:chain id="updateUsersFromMentionsFireAndForgetChain" input-channel="updateUsersFromMentionsFireAndForgetChannel">
        <int:splitter
            id="updateUsersFromMentionsFireAndForgetSplitter"
            ref="mqUpdateUserFromMentionsSplitter"
            method="splitUserMessage"  />
        <int:service-activator
            id="updateUsersFromMentionsFireAndForgetLoader"
            ref="mqUserforMentionLoader"
            method="fetchUserforMentionfromTwitter" />
        <int:service-activator
            id="updateUsersFromMentionsFireAndForgetTransformator"
            ref="mqUserforMentionTransformator"
            method="transformUserforMention" />
        <int:service-activator
            id="updateUsersFromMentionsFireAndForgetPersistor"
            ref="mqUserforMentionPersistor"
            method="persistUserforMention" />
        <int:service-activator
            id="updateMentionWithUserFireAndForgetPersistor"
            ref="mqUpdateMentionWithUser"
            method="updateMentionWithUser" />
        <int:aggregator
            id="updateUsersFromMentionsFireAndForgetAggregator"
            message-store="myMessageStore"
            release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
            id="updateUsersFromMentionsFireAndForgetFinisher"
            ref="mqMentionFinisher"
            method="finishAsnyc" />
    </int:chain>


    <int:chain id="fetchTweetsFromSearchFireAndForgetChain" input-channel="fetchTweetsFromSearchFireAndForgetChannel">
        <int:splitter
                id="fetchTweetsFromSearchFireAndForgetSplitter"
                ref="mqFetchTweetsFromTwitterSearchSplitter"
                method="splitTweetMessage" />
        <int:service-activator
                id="fetchTweetsFromSearchFireAndForgetTransformator"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="fetchTweetsFromSearchFireAndForgetPersistor"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="fetchTweetsFromSearchFireAndForgetAggregator"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="fetchTweetsFromSearchFireAndForgetFinisher"
                ref="mqTweetFinisher"
                method="finishAsnyc"  />
    </int:chain>


    <int:chain id="fetchUsersFromListFireAndForgetChain" input-channel="fetchUsersFromListFireAndForgetChannel">
        <int:splitter
                id="fetchUsersFromListFireAndForgetSplitter"
                ref="mqFetchUserFromListSplitter"
                method="splitUserMessage" />
        <int:service-activator
                id="fetchUsersFromListFireAndForgetTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="fetchUsersFromListFireAndForgetPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="fetchUsersFromListFireAndForgetAggregator"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="fetchUsersFromListFireAndForgetFinisher"
                ref="mqUserFinisher"
                method="finishAsnyc" />
    </int:chain>


    <int:chain id="fetchFollowerFireAndForgetChain" input-channel="fetchFollowerFireAndForgetChannel">
        <int:splitter
                id="fetchFollowerFireAndForgetSplitter"
                ref="mqFetchFollowerSplitter"
                method="splitUserMessage"  />
        <int:service-activator
                id="fetchFollowerFireAndForgetUserCheckStorage"
                ref="mqUserCheckStorage"
                method="checkIfUserIsInStorage" />
        <int:service-activator
                id="fetchFollowerFireAndForgetTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="fetchFollowerFireAndForgetPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="cfetchFollowerFireAndForgetAggregator"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="fetchFollowerFireAndForgetFinisher"
                ref="mqUserFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="fetchFriendsFireAndForgetChain" input-channel="fetchFriendsFireAndForgetChannel">
        <int:splitter
                id="fetchFriendsFireAndForgetSplitter"
                ref="mqFetchFriendsSplitter"
                method="splitUserMessage"  />
        <int:service-activator
                id="fetchFriendsFireAndForgetUserCheckStorage"
                ref="mqUserCheckStorage"
                method="checkIfUserIsInStorage" />
        <int:service-activator
                id="fetchFriendsFireAndForgetTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="fetchFriendsFireAndForgetPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="fetchFriendsFireAndForgetAggregator"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="fetchFriendsFireAndForgetFinisher"
                ref="mqUserFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="createTestDataUsersFireAndForgetChain" input-channel="createTestDataUsersFireAndForgetChannel">
        <int:splitter
                id="createTestDataUsersFireAndForgetSplitter"
                ref="mqCreateTestDataForUsersSplitter"
                method="splitUserMessage"  />
        <int:service-activator
                id="createTestDataUsersFireAndForgetTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="createTestDataUsersFireAndForgetPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="createTestDataUsersFireAndForgetAggregator"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="createTestDataUsersFireAndForgetFinisher"
                ref="mqUserFinisher"
                method="finishAsnyc" />
    </int:chain>


    <int:chain id="createTestDataTweetsFireAndForgetChain" input-channel="createTestDataTweetsFireAndForgetChannel">
        <int:splitter
                id="createTestDataTweetsFireAndForgetSplitter"
                ref="mqCreateTestDataForTweetsSplitter"
                method="splitTweetMessage"  />
        <int:service-activator
                id="createTestDataTweetsFireAndForgetTransformator"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="createTestDataTweetsFireAndForgetPersistor"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="createTestDataTweetsFireAndForgetAggregator"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="createTestDataTweetsFireAndForgetFinisher"
                ref="mqTweetFinisher"
                method="finishAsnyc" />
    </int:chain>

    <int:chain id="removeOldDataFromStorageFireAndForgetChain" input-channel="removeOldDataFromStorageFireAndForgetChannel">
        <int:splitter
                id="removeOldDataFromStorageFireAndForgetSplitter"
                ref="mqFindTweetsToRemoveSplitter"
                method="splitTweetMessage"  />
        <int:aggregator
                id="removeOldDataFromStorageFireAndForgetAggregator"
                message-store="myMessageStore"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="removeOldDataFromStorageFireAndForgetFinisher"
                ref="mqTweetFinisher"
                method="finishAsnyc" />
    </int:chain>
    -->

</beans>
