<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int="http://www.springframework.org/schema/integration"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/integration
    http://www.springframework.org/schema/integration/spring-integration.xsd">

    <bean id="store" class="org.springframework.integration.store.SimpleMessageStore">
        <property name="messageGroupFactory">
            <bean class="org.springframework.integration.store.SimpleMessageGroupFactory">
                <constructor-arg value="BLOCKING_QUEUE"/>
            </bean>
        </property>
    </bean>

    <bean id="releaserSequenceSizeReleaseStrategy"
          class="org.springframework.integration.aggregator.SequenceSizeReleaseStrategy"/>

    <bean id="releaserSimpleSequenceSizeReleaseStrategy"
          class="org.springframework.integration.aggregator.SimpleSequenceSizeReleaseStrategy"/>

    <!-- CHANNEL -->

    <int:logging-channel-adapter id="logger" level="DEBUG"/>

    <int:channel id="startTaskChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="updateTweetsChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger" />
        </int:interceptors>
    </int:channel>

    <int:channel id="updateUsersChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="updateUsersFromMentionsChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="fetchTweetsFromSearchChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="fetchUsersFromListChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="createTestDataUsersChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="createTestDataTweetsChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="createImprintUserChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>


    <int:router id="startTaskRouter" input-channel="startTaskChannel" expression="payload.taskType">
        <int:mapping value="UPDATE_TWEETS" channel="updateTweetsChannel"/>
        <int:mapping value="UPDATE_USERS" channel="updateUsersChannel"/>
        <int:mapping value="UPDATE_USERS_FROM_MENTIONS" channel="updateUsersFromMentionsChannel"/>
        <int:mapping value="FETCH_TWEETS_FROM_SEARCH" channel="fetchTweetsFromSearchChannel"/>
        <int:mapping value="FETCH_USERS_FROM_LIST" channel="fetchUsersFromListChannel"/>
        <int:mapping value="CONTROLLER_CREATE_TESTDATA_USERS" channel="createTestDataUsersChannel"/>
        <int:mapping value="CONTROLLER_CREATE_TESTDATA_TWEETS" channel="createTestDataTweetsChannel"/>
        <int:mapping value="CONTROLLER_CREATE_IMPRINT_USER" channel="createImprintUserChannel"/>
    </int:router>

    <int:chain id="updateTweetsChain" input-channel="updateTweetsChannel">
        <int:splitter
                id="updateTweetsSplitter"
                ref="mqUpdateTweetsSplitter"
                method="splitMessage"  />
        <int:service-activator
                id="updateTweetsTransformator"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="updateTweetsPersistor"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="updateTweetsAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="updateTweetsFinisher"
                ref="mqTweetFinisher"
                method="finish" />
    </int:chain>


    <int:chain id="updateUsersChain" input-channel="updateUsersChannel">
        <int:splitter
                id="updateUsersSplitter"
                ref="mqUpdateUserSplitter"
                method="splitMessage" />
        <int:service-activator
                id="updateUsersTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="updateUsersPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="updateUsersAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="updateUsersFinisher"
                ref="mqUserFinisher"
                method="finish" />
    </int:chain>


    <int:chain id="updateUsersFromMentionsChain" input-channel="updateUsersFromMentionsChannel">
        <int:splitter
                id="updateUsersFromMentionsSplitter"
                ref="mqUpdateUserFromMentionsSplitter"
                method="splitMessage"  />
        <int:service-activator
                id="updateUsersFromMentionsTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="updateUsersFromMentionsPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="updateUsersFromMentionsAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="updateUsersFromMentionsFinisher"
                ref="mqUserFinisher"
                method="finish" />
    </int:chain>


    <int:chain id="fetchTweetsFromSearchChain" input-channel="fetchTweetsFromSearchChannel">
        <int:splitter
                id="fetchTweetsFromSearchSplitter"
                ref="mqFetchTweetsFromTwitterSearchSplitter"
                method="splitMessage"  />
        <int:service-activator
                id="fetchTweetsFromSearchTransformator"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="fetchTweetsFromSearchPersistor"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="fetchTweetsFromSearchAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="fetchTweetsFromSearchFinisher"
                ref="mqTweetFinisher"
                method="finish" />
    </int:chain>


    <int:chain id="fetchUsersFromListChain" input-channel="fetchUsersFromListChannel">
        <int:splitter
                id="fetchUsersFromListSplitter"
                ref="mqFetchUserFromListSplitter"
                method="splitMessage"  />
        <int:service-activator
                id="fetchUsersFromListTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="fetchUsersFromListPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="fetchUsersFromListAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="fetchUsersFromListFinisher"
                ref="mqUserFinisher"
                method="finish" />
    </int:chain>

    <int:chain id="createTestDataUsersChain" input-channel="createTestDataUsersChannel">
        <int:splitter
                id="createTestDataUsersSplitter"
                ref="mqCreateTestDataForUsersSplitter"
                method="splitMessage"  />
        <int:service-activator
                id="createTestDataUsersTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="createTestDataUsersPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="createTestDataUsersAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="createTestDataUsersFinisher"
                ref="mqUserFinisher"
                method="finish" />
    </int:chain>


    <int:chain id="createTestDataTweetsChain" input-channel="createTestDataTweetsChannel">
        <int:splitter
                id="createTestDataTweetsSplitter"
                ref="mqCreateTestDataForTweetsSplitter"
                method="splitMessage"  />
        <int:service-activator
                id="createTestDataTweetsTransformator"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="createTestDataTweetsPersistor"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="createTestDataTweetsAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="createTestDataTweetsFinisher"
                ref="mqTweetFinisher"
                method="finish" />
    </int:chain>

    <int:chain id="createImprintUserChain" input-channel="createImprintUserChannel">
        <int:service-activator
                id="createImprintUserCreator"
                ref="mqCreateImprintUser"
                method="createImprintUser" />
        <int:service-activator
                id="createImprintUserTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="createImprintUserPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
    </int:chain>

    <int:channel id="startTaskFireAndForgetChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:dispatcher task-executor="myThreadPoolTaskExecutor"/>
    </int:channel>

    <bean id="myThreadPoolTaskExecutor"
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
    </bean>

    <int:router id="startTaskFireAndForgetRouter" input-channel="startTaskFireAndForgetChannel" expression="payload.taskType">
        <int:mapping value="UPDATE_TWEETS" channel="updateTweetsFireAndForgetChannel"/>
        <int:mapping value="UPDATE_USERS" channel="updateUsersFireAndForgetChannel"/>
        <int:mapping value="UPDATE_USERS_FROM_MENTIONS" channel="updateUsersFromMentionsFireAndForgetChannel"/>
        <int:mapping value="FETCH_TWEETS_FROM_SEARCH" channel="fetchTweetsFromSearchFireAndForgetChannel"/>
        <int:mapping value="FETCH_USERS_FROM_LIST" channel="fetchUsersFromListFireAndForgetChannel"/>
        <int:mapping value="CONTROLLER_CREATE_TESTDATA_USERS" channel="createTestDataUsersFireAndForgetChannel"/>
        <int:mapping value="CONTROLLER_CREATE_TESTDATA_TWEETS" channel="createTestDataTweetsFireAndForgetChannel"/>
    </int:router>

    <int:channel id="updateTweetsFireAndForgetChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="updateUsersFireAndForgetChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="fetchTweetsFromSearchFireAndForgetChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="updateUsersFromMentionsFireAndForgetChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="fetchUsersFromListFireAndForgetChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="createTestDataUsersFireAndForgetChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="createTestDataTweetsFireAndForgetChannel" datatype="org.woehlke.twitterwall.scheduled.mq.msg.TaskMessage">
        <int:interceptors>
            <int:wire-tap channel="logger"/>
        </int:interceptors>
    </int:channel>


    <int:chain id="updateTweetsFireAndForgetChain" input-channel="updateTweetsFireAndForgetChannel">
        <int:splitter
                id="updateTweetsFireAndForgetSplitter"
                ref="mqUpdateTweetsSplitter"
                method="splitMessage"  />
        <int:service-activator
                id="updateTweetsFireAndForgetTransformator"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="updateTweetsFireAndForgetPersistor"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="updateTweetsFireAndForgetAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="updateTweetsFireAndForgetFinisher"
                ref="mqTweetFinisher"
                method="finishAsnyc" />
    </int:chain>


    <int:chain id="updateUserFireAndForgetChain" input-channel="updateUsersFireAndForgetChannel">
        <int:splitter
                id="updateUserFireAndForgetSplitter"
                ref="mqUpdateUserSplitter"
                method="splitMessage"  />
        <int:service-activator
                id="updateUserFireAndForgetTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="updateUserFireAndForgetPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="updateUserFireAndForgetAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="updateUserFireAndForgetFinisher"
                ref="mqUserFinisher"
                method="finishAsnyc" />
    </int:chain>


    <int:chain id="updateUsersFromMentionsFireAndForgetChain" input-channel="updateUsersFromMentionsFireAndForgetChannel">
        <int:splitter
                id="updateUsersFromMentionsFireAndForgetSplitter"
                ref="mqUpdateUserFromMentionsSplitter"
                method="splitMessage"  />
        <int:service-activator
                id="updateUsersFromMentionsFireAndForgetTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="updateUsersFromMentionsFireAndForgetPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="updateUsersFromMentionsFireAndForgetAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="updateUsersFromMentionsFireAndForgetFinisher"
                ref="mqUserFinisher"
                method="finishAsnyc" />
    </int:chain>


    <int:chain id="fetchTweetsFromSearchFireAndForgetChain" input-channel="fetchTweetsFromSearchFireAndForgetChannel">
        <int:splitter
                id="fetchTweetsFromSearchFireAndForgetSplitter"
                ref="mqFetchTweetsFromTwitterSearchSplitter"
                method="splitMessage" />
        <int:service-activator
                id="fetchTweetsFromSearchFireAndForgetTransformator"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="fetchTweetsFromSearchFireAndForgetPersistor"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="fetchTweetsFromSearchFireAndForgetAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="fetchTweetsFromSearchFireAndForgetFinisher"
                ref="mqTweetFinisher"
                method="finishAsnyc"  />
    </int:chain>


    <int:chain id="fetchUsersFromListFireAndForgetChain" input-channel="fetchUsersFromListFireAndForgetChannel">
        <int:splitter
                id="fetchUsersFromListFireAndForgetSplitter"
                ref="mqFetchUserFromListSplitter"
                method="splitMessage" />
        <int:service-activator
                id="fetchUsersFromListFireAndForgetTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="fetchUsersFromListFireAndForgetPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="fetchUsersFromListFireAndForgetAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="fetchUsersFromListFireAndForgetFinisher"
                ref="mqUserFinisher"
                method="finishAsnyc" />
    </int:chain>


    <int:chain id="createTestDataUsersFireAndForgetChain" input-channel="createTestDataUsersFireAndForgetChannel">
        <int:splitter
                id="createTestDataUsersFireAndForgetSplitter"
                ref="mqCreateTestDataForUsersSplitter"
                method="splitMessage"  />
        <int:service-activator
                id="createTestDataUsersFireAndForgetTransformator"
                ref="mqUserTransformator"
                method="transformUser" />
        <int:service-activator
                id="createTestDataUsersFireAndForgetPersistor"
                ref="mqUserPersistor"
                method="persistUser" />
        <int:aggregator
                id="createTestDataUsersFireAndForgetAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="createTestDataUsersFireAndForgetFinisher"
                ref="mqUserFinisher"
                method="finishAsnyc" />
    </int:chain>


    <int:chain id="createTestDataTweetsFireAndForgetChain" input-channel="createTestDataTweetsFireAndForgetChannel">
        <int:splitter
                id="createTestDataTweetsFireAndForgetSplitter"
                ref="mqCreateTestDataForTweetsSplitter"
                method="splitMessage"  />
        <int:service-activator
                id="createTestDataTweetsFireAndForgetTransformator"
                ref="mqTweetTransformator"
                method="transformTweet" />
        <int:service-activator
                id="createTestDataTweetsFireAndForgetPersistor"
                ref="mqTweetPersistor"
                method="persistTweet" />
        <int:aggregator
                id="createTestDataTweetsFireAndForgetAggregator"
                message-store="store"
                release-strategy="releaserSimpleSequenceSizeReleaseStrategy" />
        <int:service-activator
                id="createTestDataTweetsFireAndForgetFinisher"
                ref="mqTweetFinisher"
                method="finishAsnyc" />
    </int:chain>

</beans>
