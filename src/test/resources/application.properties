logging.file=twitterwall.log

#spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=false
spring.jpa.generate-ddl=true
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL94Dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect


spring.datasource.url=jdbc:h2:mem:test
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.platform=H2
spring.datasource.maxActive=60
spring.datasource.maxIdle=5
spring.datasource.minIdle=2
spring.datasource.initialSize=5
spring.datasource.removeAbandoned=true
spring.datasource.max-total=70


#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL94Dialect
hibernate.dialect=org.hibernate.dialect.H2Dialect

# Number of ms to wait before throwing an exception if no connection is available.
spring.datasource.tomcat.max-wait=10000

# Maximum number of active connections that can be allocated from this pool at the same time.
spring.datasource.tomcat.max-active=50

#
#Refer to "Manage your Apps" on Twitter's dev pages: https://dev.twitter.com/apps
#
twitter.consumerKey=${TWITTER_CONSUMER_KEY}
twitter.consumerSecret=${TWITTER_CONSUMER_SECRET}
twitter.accessToken=${TWITTER_ACCESS_TOKEN}
twitter.accessTokenSecret=${TWITTER_ACCESS_TOKEN_SECRET}

twitter.pageSize=${TWITTER_PAGE_SIZE}
twitter.searchQuery=${TWITTER_SEARCH_TERM}
twitterwall.backend.twitter.millisToWaitForFetchTweetsFromTwitterSearch=${TWITTERWALL_WAIT_FOR_TEST}
twitterwall.backend.url.fetchTestDataVerbose=${TWITTERWALL_URL_TEST_DATA_VERBOSE}
twitterwall.backend.twitter.millisToWaitBetweenTwoApiCalls=5000
twitterwall.backend.url.connTimeToLive=10
twitterwall.backend.url.maxIdleTime=120

spring.social.twitter.appId=${twitter.consumerKey}
spring.social.twitter.appSecret=${twitter.consumerSecret}
spring.social.twitter.accessToken=${twitter.accessToken}
spring.social.twitter.accessTokenSecret=${twitter.accessTokenSecret}

twitterwall.frontend.info.webpage=${TWITTERWALL_INFO_WEBPAGE}
twitterwall.frontend.theme=typo3
twitterwall.frontend.maxResults=${TWITTERWALL_FRONTEND_MAX_RESULTS}
twitterwall.frontend.menu.appname=TWITTERWALL_TEST_APP
twitterwall.frontend.imprint.screenName=port80guru
twitterwall.frontend.imprint.subtitle='www.natural-born-coder.de <br/> twitterwall-port80guru.herokuapp.com'
twitterwall.frontend.idGoogleAnalytics=GOOGLE_ANALYTICS_ID

twitterwall.scheduler.allowUpdateTweets=true
twitterwall.scheduler.allowUpdateUserProfiles=true
twitterwall.scheduler.allowUpdateUserProfilesFromMention=true
twitterwall.scheduler.allowFetchTweetsFromTwitterSearch=true
twitterwall.scheduler.herokuDbRowsLimit=true
twitterwall.scheduler.skipFortesting=true
twitterwall.scheduler.fetchUserList.name=${TWITTERWALL_SCHEDULER_USER_LIST_NAME}
twitterwall.scheduler.fetchUserList.allow=true


twitterwall.context.test=true

# Actuator
management.address = 127.0.0.1
management.context-path	= /manage
management.security.enabled=false
spring.application.name = @project.name@

# Actuator /info
info.application.name = @project.name@
info.application.groupId = @project.groupId@
info.application.artifactId = @project.artifactId@
info.application.version = @project.version@
info.application.description = @project.description@

# Actuator /shutdown
endpoints.shutdown.enabled = false

# Actuator /health
endpoints.health.sensitive = false

# Actuator /env, /configprops, /autoconfig
endpoints.env.keys-to-sanitize = password,secret,key,passwort

# Thymeleaf
spring.thymeleaf.cache=false
spring.template.cache=false

spring.devtools.livereload.enabled=false

spring.application.admin.enabled=false
